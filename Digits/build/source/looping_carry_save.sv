/*
    This file was generated automatically by Alchitry Labs 2.0.34-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module looping_carry_save #(
        parameter SIZE = 3'h6,
        parameter INTEGER_SIZE = 5'h10
    ) (
        input wire clk,
        input wire signed [(SIZE)-1:0][(INTEGER_SIZE)-1:0] array,
        output reg signed [(INTEGER_SIZE)-1:0] out,
        input wire signed [(INTEGER_SIZE)-1:0] bias,
        output reg [(INTEGER_SIZE)-1:0] in,
        input wire start,
        output reg ready
    );
    logic [($clog2((($bits(SIZE) > $bits(1'h1) ? $bits(SIZE) : $bits(1'h1)) + 1)'(SIZE + 1'h1)))-1:0] D_index_d, D_index_q = 0;
    logic signed [(INTEGER_SIZE)-1:0] D_total_d, D_total_q = 0;
    always @* begin
        D_total_d = D_total_q;
        D_index_d = D_index_q;
        
        out = (($bits($signed(D_total_q)) > $bits($signed(bias)) ? $bits($signed(D_total_q)) : $bits($signed(bias))) + 1)'($signed(D_total_q) + $signed(bias));
        ready = 1'h0;
        in = D_index_q;
        if (start) begin
            if (D_index_q < SIZE) begin
                D_total_d = (($bits($signed(D_total_q)) > $bits(array[D_index_q]) ? $bits($signed(D_total_q)) : $bits(array[D_index_q])) + 1)'($signed(D_total_q) + array[D_index_q]);
                D_index_d = (($bits(D_index_q) > $bits(1'h1) ? $bits(D_index_q) : $bits(1'h1)) + 1)'(D_index_q + 1'h1);
            end else begin
                ready = 1'h1;
                D_total_d = $signed(D_total_q);
            end
        end
    end
    
    
    always @(posedge (clk)) begin
        D_index_q <= D_index_d;
        D_total_q <= D_total_d;
        
    end
endmodule