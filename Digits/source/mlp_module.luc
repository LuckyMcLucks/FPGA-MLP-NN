module mlp_module (
    input clk,  // clock
    input rst,  // reset
    input in [28][28][1],
    output out[4]
) {
    
    .clk(clk){    
        #SIZE(784){
        looping_carry_save adder1 [16] 
            }

        #SIZE(16){
        looping_carry_save adder3 [10] 
            }
        #INPUT_SIZE(784){
           input_neuron input_layer[16] 
        }

        #INPUT_SIZE(16){
           output_neuron output_layer[10] 
        }
        choose pooling(.rst(rst))
        
    }
    enum States{DEFAULT,LAYER1,LAYER2,LAYER3}
    dff state$width(States),.clk(clk))    
    weights weights
    layer3 w3
    relu relu[16] 
    sigmoid sigmoid[10]
    always {
        input_layer.in = 16x{{$flatten(in)}}
        adder1.array = input_layer.out
        input_layer.weights = weights.out1
        adder1.bias = weights.out2
        relu.value  =adder1.out
        


        output_layer.in = 10x{{relu.out}}
        adder3.array = output_layer.out
        output_layer.weights = w3.w
        adder3.bias = w3.b
        sigmoid.x = adder3.out
        
        pooling.in = sigmoid.out
        
        adder1.start = 16h0

        adder3.start = 10h0
        out = pooling.out
        case (state.q){
            States.DEFAULT:
            adder1.start =16h0
            state.d =States.LAYER1
            States.LAYER1:
            adder1.start =16hFFFF
            if (&adder1.ready){
             state.d =States.LAYER3       
                }

            States.LAYER3:
            adder3.start =10hFFFF
            if (&adder3.ready){
             state.d =States.LAYER3      
                }
            
        }
        
    }
}