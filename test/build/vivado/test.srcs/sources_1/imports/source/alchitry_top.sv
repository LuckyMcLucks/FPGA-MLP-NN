/*
    This file was generated automatically by Alchitry Labs 2.0.34-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        input wire [2:0][7:0] io_dip
    );
    logic M_slow_clock_clk_out1;
    
    clk_wiz_0 slow_clock (
        .clk_in1(clk),
        .clk_out1(M_slow_clock_clk_out1)
    );
    
    
    logic rst;
    localparam _MP_STAGES_1967924241 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1967924241)
    ) reset_cond (
        .clk(M_slow_clock_clk_out1),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_SIZE_867355972 = 10'h310;
    logic signed [783:0][15:0] M_adder_array;
    logic signed [15:0] M_adder_out;
    logic signed [15:0] M_adder_bias;
    logic [15:0] M_adder_in;
    logic M_adder_start;
    logic M_adder_ready;
    
    looping_carry_save #(
        .SIZE(_MP_SIZE_867355972)
    ) adder (
        .clk(M_slow_clock_clk_out1),
        .array(M_adder_array),
        .out(M_adder_out),
        .bias(M_adder_bias),
        .in(M_adder_in),
        .start(M_adder_start),
        .ready(M_adder_ready)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        M_adder_array = {{16'h2, 16'h1, -16'sh2, 16'h1, 16'h0, -16'sha, 16'h5, -16'sh3, -16'sh6, -16'sh1, -16'sh5, 16'h7, 16'h6, 16'h4, 16'h1, -16'sh9, -16'sh8, 16'h6, -16'sh1, 16'h4, -16'sh8, -16'sh8, 16'h2, -16'sh6, -16'sh6, 16'h0, 16'h4, 16'h0, -16'sh2, 16'h5, -16'sh1, -16'sh3, -16'sh3, -16'sh7, -16'sh3, -16'sh8, -16'sh6, -16'sh2, 16'h0, -16'sha, -16'sh8, 16'h6, 16'h2, 16'h2, -16'sh2, 16'h1, 16'h1, 16'h4, -16'sh5, 16'h2, -16'sh2, 16'h5, 16'h4, -16'sh9, -16'sh2, -16'sh8, -16'sh6, 16'h6, -16'sh9, -16'sh6, 16'h4, 16'h5, -16'sh3, -16'sh8, -16'sh1, 16'h2, -16'sh3, 16'h6, 16'h0, 16'h4, -16'sh3, -16'sh6, -16'sh3, -16'sha, -16'sh7, -16'sh3, 16'h7, 16'h6, 16'h5, -16'sh6, -16'sha, 16'h1, -16'sh2, -16'sh6, 16'h0, 16'h4, 16'h2, -16'sh9, 16'h1, 16'h3, -16'sh8, -16'sh8, 16'h4, -16'sh2, 16'h2, -16'sh7, -16'sha, -16'sha, 16'h1, -16'sh9, 16'h2, 16'h3, 16'h4, -16'sh9, 16'h2, 16'h0, -16'sh2, -16'sh3, 16'h3, 16'h4, -16'sh4, -16'sh2, -16'sh4, 16'h0, -16'sh5, 16'h5, 16'h6, -16'sh1, -16'sh2, -16'sh1, 16'h2, 16'h5, 16'h6, 16'h4, 16'h1, -16'sh4, -16'sh4, -16'sh7, 16'h6, -16'sha, 16'h6, -16'sh3, 16'h6, -16'sh5, 16'h0, -16'sh6, -16'sh3, 16'h7, -16'sh9, -16'sh7, -16'sh4, 16'h7, 16'h3, -16'sh5, 16'h5, -16'sh9, -16'sh3, -16'sha, 16'h4, 16'h7, -16'sh7, 16'h7, 16'h3, 16'h5, 16'h0, -16'sh8, -16'sh2, 16'h3, 16'h4, 16'h2, -16'sh3, 16'h0, 16'h7, -16'sh1, -16'sh1, -16'sh7, 16'h5, 16'h0, 16'h6, 16'h5, -16'sh1, -16'sh6, 16'h4, -16'sh4, -16'sh9, -16'sh9, -16'sh2, -16'sh1, 16'h3, 16'h0, 16'h1, -16'sh8, 16'h7, 16'h4, -16'sh2, -16'sh9, -16'sh7, -16'sh7, 16'h6, -16'sh6, 16'h0, -16'sh2, -16'sh8, -16'sh6, -16'sh3, 16'h3, -16'sh8, -16'sh6, -16'sh2, -16'sh4, -16'sh6, 16'h0, -16'sha, -16'sh5, 16'h3, -16'sh3, 16'h2, 16'h2, -16'sh2, -16'sh2, -16'sha, -16'sh7, -16'sh6, 16'h2, -16'sh4, -16'sh8, 16'h6, 16'h1, -16'sh9, -16'sh7, -16'sh5, -16'sh5, 16'h6, -16'sh4, 16'h4, -16'sh4, 16'h0, 16'h6, 16'h6, 16'h6, 16'h4, 16'h1, 16'h4, -16'sh8, 16'h3, 16'h5, 16'h7, 16'h4, -16'sha, 16'h4, -16'sh7, 16'h3, -16'sh6, 16'h7, 16'h6, -16'sh9, 16'h4, -16'sh1, 16'h6, 16'h4, 16'h3, 16'h0, -16'sh7, 16'h0, 16'h5, -16'sh7, -16'sh7, 16'h5, 16'h2, -16'sh3, 16'h3, 16'h4, -16'sh7, -16'sh8, 16'h6, 16'h6, 16'h6, -16'sh2, -16'sh7, 16'h5, 16'h7, -16'sh9, 16'h2, -16'sh1, -16'sh7, -16'sh7, -16'sh5, 16'h7, 16'h7, 16'h0, 16'h1, 16'h5, -16'sh7, -16'sha, 16'h2, -16'sh9, -16'sh1, -16'sh6, -16'sh1, 16'h7, -16'sh2, 16'h3, -16'sh6, -16'sh3, -16'sh1, -16'sh3, -16'sh7, 16'h5, -16'sh3, -16'sha, -16'sh6, -16'sh6, -16'sh6, 16'h2, -16'sh5, -16'sh3, 16'h3, -16'sh8, -16'sh8, -16'sh5, 16'h5, -16'sh7, 16'h7, -16'sh9, 16'h5, -16'sh2, 16'h5, -16'sh9, 16'h7, -16'sh7, -16'sh4, -16'sh1, 16'h1, -16'sh2, 16'h4, 16'h0, 16'h5, -16'sh4, -16'sh2, -16'sh8, -16'sh1, 16'h6, -16'sh7, 16'h5, -16'sh3, -16'sh5, 16'h7, 16'h6, -16'sh9, 16'h5, -16'sh8, 16'h6, -16'sh3, 16'h5, 16'h2, 16'h1, -16'sh6, 16'h1, -16'sh3, -16'sh9, 16'h4, -16'sh5, -16'sh5, 16'h3, -16'sh6, -16'sh2, -16'sh2, 16'h0, -16'sh1, 16'h6, -16'sh8, 16'h1, 16'h1, 16'h7, 16'h6, -16'sha, 16'h4, -16'sh1, -16'sh5, -16'sha, -16'sh5, 16'h7, 16'h4, -16'sh5, 16'h6, -16'sh9, -16'sha, 16'h2, -16'sh9, -16'sh8, 16'h3, -16'sha, 16'h1, 16'h4, 16'h3, -16'sh4, 16'h6, 16'h0, -16'sh2, -16'sh7, -16'sh7, 16'h4, -16'sh7, 16'h5, -16'sh2, -16'sh7, 16'h3, 16'h0, -16'sh9, -16'sh7, -16'sh2, -16'sh2, -16'sh8, 16'h5, 16'h5, -16'sh9, -16'sh1, 16'h7, -16'sh1, 16'h0, -16'sh2, 16'h5, 16'h5, -16'sh3, -16'sh1, 16'h7, 16'h2, 16'h5, -16'sh7, 16'h1, -16'sh7, -16'sh3, -16'sh8, 16'h1, -16'sh1, -16'sh4, -16'sh7, -16'sh1, 16'h3, 16'h4, 16'h2, 16'h2, -16'sha, -16'sh1, -16'sh3, 16'h3, 16'h2, -16'sh1, -16'sh7, 16'h0, 16'h6, -16'sh4, 16'h0, 16'h0, -16'sh3, 16'h0, 16'h5, -16'sh3, 16'h7, 16'h6, 16'h1, -16'sh7, 16'h7, -16'sh3, 16'h0, 16'h3, -16'sh4, -16'sh2, 16'h6, 16'h6, -16'sh8, -16'sh4, 16'h3, -16'sh4, 16'h0, 16'h1, -16'sh9, 16'h5, 16'h2, 16'h0, 16'h3, 16'h1, -16'sh5, -16'sh8, 16'h7, -16'sh1, -16'sh4, -16'sh9, 16'h1, 16'h3, -16'sh6, -16'sha, -16'sh3, -16'sh6, -16'sh5, -16'sh7, 16'h7, 16'h1, 16'h0, -16'sh3, 16'h5, 16'h3, 16'h3, 16'h5, 16'h6, -16'sh1, -16'sh4, -16'sh7, 16'h1, -16'sh2, -16'sh3, 16'h2, -16'sh6, -16'sh5, 16'h0, -16'sha, 16'h7, 16'h2, -16'sh1, 16'h2, -16'sh7, 16'h7, -16'sh2, -16'sha, -16'sh4, -16'sh4, 16'h3, -16'sh3, 16'h4, 16'h2, -16'sh8, 16'h0, 16'h0, -16'sh5, 16'h2, -16'sh4, -16'sh7, 16'h6, -16'sh1, 16'h3, 16'h0, 16'h0, 16'h2, -16'sh4, -16'sh8, -16'sh7, -16'sh7, 16'h4, -16'sh6, -16'sh8, -16'sh3, -16'sh9, -16'sh1, 16'h5, -16'sh3, -16'sh5, -16'sh8, -16'sh5, 16'h1, -16'sh4, 16'h5, -16'sh1, 16'h2, 16'h6, 16'h1, -16'sh4, 16'h2, 16'h3, 16'h3, 16'h4, 16'h2, 16'h6, -16'sh8, -16'sh6, -16'sh5, -16'sh4, -16'sh4, -16'sh8, 16'h2, -16'sh1, -16'sh3, -16'sh8, -16'sh1, 16'h7, -16'sh4, -16'sh7, 16'h1, -16'sh7, -16'sh2, 16'h4, 16'h4, -16'sh6, 16'h1, -16'sh4, -16'sh7, 16'h7, -16'sh8, -16'sh5, 16'h1, -16'sh4, -16'sh6, -16'sh4, -16'sh9, 16'h1, -16'sh6, 16'h1, 16'h5, -16'sh1, 16'h5, -16'sh1, 16'h4, 16'h1, -16'sh9, -16'sh2, 16'h6, 16'h2, 16'h4, 16'h6, -16'sh3, 16'h7, -16'sh4, -16'sh5, 16'h6, -16'sh5, 16'h3, 16'h6, -16'sh4, -16'sha, -16'sh7, 16'h6, -16'sh3, 16'h7, -16'sh3, 16'h7, 16'h7, 16'h2, -16'sh5, -16'sh9, -16'sh4, -16'sh5, -16'sh8, 16'h4, 16'h3, -16'sha, 16'h5, 16'h3, -16'sh7, -16'sh9, -16'sh6, -16'sh1, 16'h6, -16'sh3, -16'sh6, -16'sh2, -16'sh4, 16'h3, -16'sh4, 16'h3, 16'h4, 16'h7, -16'sh5, -16'sh5, 16'h0, -16'sh6, -16'sh2, -16'sh9, 16'h7, -16'sh2, -16'sh5, -16'sh4, -16'sh9, -16'sh3, -16'sha, -16'sh1, -16'sh4, -16'sh1, -16'sh7, 16'h1, 16'h1, -16'sh4, -16'sh9, -16'sh9, -16'sh9, 16'h5, 16'h5, 16'h1, 16'h6, 16'h3, 16'h2, 16'h3, -16'sh9, 16'h6, -16'sh2, -16'sh8, 16'h0, -16'sh4, -16'sh9, -16'sh7, -16'sh1, 16'h3, 16'h7, -16'sh6, 16'h0, -16'sh2, 16'h6, 16'h6, -16'sh2, -16'sh5, -16'sh5, -16'sh8, -16'sh7, 16'h1, -16'sh3, -16'sh1, -16'sh3, 16'h5, -16'sh5, 16'h5, -16'sha, -16'sh2, 16'h0, 16'h4, -16'sh9, 16'h4, -16'sh3, 16'h6, -16'sh4, -16'sh6, -16'sh1, 16'h2, -16'sha, 16'h6, -16'sh6, 16'h7, -16'sh4, -16'sh2, 16'h1, -16'sh3, 16'h7, -16'sh5, 16'h0, -16'sha, -16'sh4, 16'h5, -16'sh4, 16'h1, 16'h6, 16'h0, -16'sh4, -16'sh7, -16'sh3, -16'sh2, 16'h3, -16'sh4, 16'h6, 16'h1, 16'h7, 16'h2, 16'h3, 16'h7, 16'h6, 16'h5, 16'h1, 16'h4, -16'sh5, 16'h6, -16'sh3, 16'h5, 16'h1, 16'h1, 16'h6, 16'h2, -16'sh4, 16'h2, -16'sh5, 16'h2, -16'sha, 16'h6, 16'h2, 16'h5, 16'h4, -16'sh4, -16'sh8, 16'h6, 16'h6, -16'sh4, -16'sh1, -16'sh6, -16'sh6, -16'sh7, 16'h1, 16'h7, -16'sh4, -16'sh7}};
        M_adder_bias = -16'sh4;
        M_adder_start = 1'h1;
        io_led[1'h1:1'h0] = {M_adder_out[4'hf:4'h8], M_adder_out[3'h7:1'h0]};
        io_led[2'h2] = 1'h0;
        led = 4'h8;
        usb_tx = usb_rx;
    end
    
    
endmodule